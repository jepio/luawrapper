LuaWrapper
Copyright (c) 2010-2011 Alexander Ames
Alexander.Ames@gmail.com

LuaWrapper is a library designed to help bridge the gab between Lua and C++.
It is designed to be small (a single header file), simple, fast, and typesafe.
It has no external dependencies other than the lua library itself, and does
not need to be precompiled; the header can simply be dropped into a project
and used immediately. It even supports class inheritance to a certain degree.
Objects can be created in either Lua or C++, and passed back and forth.

In Lua, the objects are userdata, but through tricky use of metatables, they
can be treated almost identically to tables. Each userdata has a __index and
__newindex function that maps to a table hidden in the registry. 

The main functions of interest are the following:
 luaW_is<T>
 luaW_to<T>
 luaW_check<T>
 luaW_push<T>
 luaW_register<T>
 luaW_extend<T, U>
 luaW_hold<T>
 luaW_release<T>
 luaW_clean<T>

The first four functions allow you to manipulate arbitrary classes just like
you would the primitive types (e.g. numbers or strings). luaW_is<T> allows you
to check if the object is what you think it is, and will take the is-a
relationship into account unless the optional strict argument is set.
luaW_to<T> will return a pointer of type T to your object (unless it is of the
wrong type, in which case it will return NULL). 

Registering a class:

Run luaW_register to create a table and metatable for your class. This creates
a table with the name you specify filled with the function from the table
argument in addition to the functions new and build. This is generally for
things you think of as static methods in C++. The metatable becomes a metatable
for each object if your class. These can be thought of as member functions or
methods.

You may also supply code constructors and destructors for classes that do not
have a default constructor or that require special set up or tear down. You may
specify NULL as the constructor, which means that you will not be able to call
the new function on your class table. You will need to manually push objects
from C++. By default, the default constructor is used to create objects and a
simple call to delete is used to destroy them. 

By default, LuaWrapper uses the address of C++ object to identify unique
objects. In some cases this is not desired, such as in the case of
shared_ptrs. Two shared_ptrs may themselves have unique locations in memory
but still represent the same object. For cases like that, you may specify an
identifier function which is responsible for pushing a key representing your
object on to the stack.

Extending a class:

To extend a class use the function luaW_extend<T, U>, where T is a class that
extends U. All functions in the base class will be available to the derived
class (except when they share a function name, in which case the derived
class's function wins).

Pointer Ownership:

Objects created from within Lua (or that are created through luaW_new or
luaW_build) are considered to be owned by Lua.  Ownership merely means that
when all references to it are removed, the garbage collector will delete the
object.  An object created in C++ and pushed to Lua is not considered owned
unless luaW_hold is run on it.  LuaWrapper maintains its own reference counting
in order to prevent the __gc metamethod from deleting pointers to objects that
are still in use. If an object is created in Lua and you do not want it to be
owned by Lua, you may call luaW_release on it. It is now the programmer's
responsibility to run the Lua destructor (if necessary) with luaW_destructor,
as well as remove the lua storage kept in the registry with luaW_clean. (These
are called automatically when garbage collecting Lua-owned userdata).

Construction and Destruction:

As mentioned above, you can specify a function to construct and destruct your
objects with luaW_register. Before I realized the case of classes without
default constructors I simply used the metamethods __ctor and __dtor to handle
cases where I wanted code to run immediately upon creation of a userdata.
Support for the __ctor and __dtor metamethod can probably be removed, but I'm
going to leave it around for a while to see if it becomes useful for anything.

To do:

I'm not totally happy that I have both code and Lua defined destructors (i.e.
one of each as a function pointer maintained in C++ code, and one of each
stored on the metatable). I need to determine if this is worth keeping around
of if the Lua based ones ought to be scrapped.

Maybe there should be a way to specify that you don't want certain types to be
treated as a table? (i.e. tell it to not add the __index and __newindex
metamethods)
